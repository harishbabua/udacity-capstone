version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  install-lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-upload-image:
    docker:
      - image: circleci/node:14 # Use a CircleCI Docker image as the build environment
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7 # Use the appropriate Docker version

      # Build the Docker image
      - run:
          name: Build Docker Image
          command: docker build -t harishbabua/capstone:latest .

      # Log in to Docker Hub
      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      # Push the Docker image to Docker Hub
      - run:
          name: Push Docker Image to Docker Hub
          command: docker push harishbabua/capstone:latest

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone1
        type: string
      aws-region:
        description: |
          us-east-2
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.json
          resource-name: deployment/blue
      - kubernetes/install:
          kubectl-version: v1.22.0

  create-service:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone1
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.json
          resource-name: service/bluegreenlb

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ""
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ""
workflows:
  default:
    jobs:
      - install-lint
      - build-upload-image:
          requires: [install-lint]
      - create-small-cluster:
          cluster-name: eks-demo-deployment
      - create-service:
          cluster-name: eks-demo-deployment
          requires:
            - create-small-cluster
      - create-deployment:
          cluster-name: eks-demo-deployment
          aws-region: us-east-2
          requires:
            - create-service
      - aws-eks/update-container-image:
          cluster-name: eks-demo-deployment
          container-image-updates: "blue=andresaaap/testblueimage:latest"
          record: true
          requires:
            - create-deployment
          resource-name: deployment/blue
